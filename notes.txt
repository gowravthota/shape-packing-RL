2D Space Optimizer using Reinforcement Learning

## Project Overview
This project implements a 2D container packing problem using reinforcement learning.
The goal is to efficiently place shapes within containers while respecting various constraints.

## Key Components
1. **Environment (main.py)**: OpenAI Gym environment for the container packing task
2. **Models (models/)**: 
   - DQN: Deep Q-Network implementation
   - PPO: Proximal Policy Optimization
   - A2C: Advantage Actor-Critic
3. **Constraints (constraints.py)**: Shape and container definitions with collision detection
4. **Visualization (visualization.py)**: Rendering with pygame/matplotlib fallbacks

## Problem Definition
- Different types of shapes: rectangles, circles, triangles, polygons
- Shape properties: size, color, orientation, placement
- Container constraints: boundaries, irregular shapes, obstacles
- Objectives: maximize space utilization, minimize collisions

## Approach
1. Strategic placement using reinforcement learning
2. Action masking to prevent invalid placements
3. Reward shaping for efficient packing
4. Multiple algorithm implementations for comparison

## Recent Improvements
- Fixed import paths and dependencies
- Added error handling and fallbacks
- Improved device management (CUDA/CPU)
- Unified model architectures
- Better visualization options
- Type hints and documentation

## TODO
- Implement more sophisticated shape intersection detection
- Add support for different container shapes
- Optimize reward function
- Add hyperparameter configuration
- Implement model comparison utilities
